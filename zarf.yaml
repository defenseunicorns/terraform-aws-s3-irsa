kind: ZarfPackageConfig
metadata:
  name: terraform-aws-s3-irsa
  description: "Terraform module to create an S3 bucket with IRSA enabled"
  version: "0.0.1"
  architecture: amd64
  source: https://github.com/defenseunicorns/terraform-aws-uds-s3-irsa
  documentation: https://github.com/defenseunicorns/terraform-aws-uds-s3-irsa
  vendor: Defense Unicorns

variables:
  - name: TERRAFORM_VERSION
  - name: TERRAFORM_PROVIDER_AWS_VERSION

  - name: APP
    description: "Name of the application i.e. loki, velero, gitlab"
  - name: REGION
    description: "target AWS region"
  - name: NAME_PREFIX
    description: "Name of the target cluster"
  - name: ZARF_VERSION
    default: "v0.27.0"
  - name: STATE_BUCKET_NAME
    description: "Name of the pre-existing Terraform state S3 bucket"
  # - name: EKS_STATE_KEY
  #   description: "Path to the eks state file key in the state bucket"
  - name: IAC_STATE_KEY
    description: "Path to the IAC state file key created from this pkg"
  - name: STATE_DYNAMODB_TABLE_NAME
    description: "Name of the DynamoDB table used for Terraform state locking"
  - name: EPHEMERAL
    description: "Set whether the cluster should be considered ephemeral - if true all resources will be force destroyed on removal"
    default: "false"
  - name: FORCE_DESTROY
    description: "If set to true, delete the S3 bucket and corresponding KMS key associated with the Loki bucket. Overrides ephemeral setting."
    default: "false"

components:
  - name: set-ephemeral
    required: true
    actions:
      onDeploy:
        before:
          - cmd: |
              if [ -z "${ZARF_VAR_FORCE_DESTROY}" ]; then
                echo "${ZARF_VAR_EPHEMERAL}"
              else
                echo "${ZARF_VAR_FORCE_DESTROY}"
              fi
            mute: true
            setVariables:
              - name: FORCE_DESTROY

  - name: download-terraform
    required: true
    actions:
      onDeploy:
        after:
          # - cmd: |
          #     rm -f run/loki/terraform || true
          #   description: Clean up previous install since archiver doesn't overwrite the output
          - cmd: "./s3-irsa/extract-terraform.sh ###ZARF_PKG_TMPL_TERRAFORM_VERSION### ###ZARF_PKG_TMPL_TERRAFORM_PROVIDER_AWS_VERSION###"
          # - cmd: rm -rf tmp
    files:
      - source: ./s3-irsa/extract.sh
        target: ./s3-irsa/extract-terraform.sh
        executable: true
      # terraform binary into zarf package
      - source: https://releases.hashicorp.com/terraform/###ZARF_PKG_TMPL_TERRAFORM_VERSION###/terraform_###ZARF_PKG_TMPL_TERRAFORM_VERSION###_darwin_arm64.zip
        target: tmp/terraform_###ZARF_PKG_TMPL_TERRAFORM_VERSION###_darwin_arm64.zip
      - source: https://releases.hashicorp.com/terraform/###ZARF_PKG_TMPL_TERRAFORM_VERSION###/terraform_###ZARF_PKG_TMPL_TERRAFORM_VERSION###_darwin_amd64.zip
        target: tmp/terraform_###ZARF_PKG_TMPL_TERRAFORM_VERSION###_darwin_amd64.zip
      - source: https://releases.hashicorp.com/terraform/###ZARF_PKG_TMPL_TERRAFORM_VERSION###/terraform_###ZARF_PKG_TMPL_TERRAFORM_VERSION###_linux_amd64.zip
        target: tmp/terraform_###ZARF_PKG_TMPL_TERRAFORM_VERSION###_linux_amd64.zip
      - source: https://releases.hashicorp.com/terraform-provider-aws/###ZARF_PKG_TMPL_TERRAFORM_PROVIDER_AWS_VERSION###/terraform-provider-aws_###ZARF_PKG_TMPL_TERRAFORM_PROVIDER_AWS_VERSION###_darwin_arm64.zip
        target: tmp/terraform-provider-aws_###ZARF_PKG_TMPL_TERRAFORM_PROVIDER_AWS_VERSION###_darwin_arm64.zip
      - source: https://releases.hashicorp.com/terraform-provider-aws/###ZARF_PKG_TMPL_TERRAFORM_PROVIDER_AWS_VERSION###/terraform-provider-aws_###ZARF_PKG_TMPL_TERRAFORM_PROVIDER_AWS_VERSION###_darwin_amd64.zip
        target: tmp/terraform-provider-aws_###ZARF_PKG_TMPL_TERRAFORM_PROVIDER_AWS_VERSION###_darwin_amd64.zip
      - source: https://releases.hashicorp.com/terraform-provider-aws/###ZARF_PKG_TMPL_TERRAFORM_PROVIDER_AWS_VERSION###/terraform-provider-aws_###ZARF_PKG_TMPL_TERRAFORM_PROVIDER_AWS_VERSION###_linux_amd64.zip
        target: tmp/terraform-provider-aws_###ZARF_PKG_TMPL_TERRAFORM_PROVIDER_AWS_VERSION###_linux_amd64.zip
      - source: https://releases.hashicorp.com/terraform-provider-aws/###ZARF_PKG_TMPL_TERRAFORM_PROVIDER_AWS_VERSION###/terraform-provider-aws_###ZARF_PKG_TMPL_TERRAFORM_PROVIDER_AWS_VERSION###_windows_amd64.zip
        target: tmp/terraform-provider-aws_###ZARF_PKG_TMPL_TERRAFORM_PROVIDER_AWS_VERSION###_windows_amd64.zip

  - name: terraform-init
    required: true
    description: Terraform init using zarf actions
    actions:
      onCreate:
        defaults:
          maxTotalSeconds: 300
          maxRetries: 3
        before:
          - cmd: "terraform init -backend=false"
            dir: ./s3-irsa
    files:
      - source: ./s3-irsa/
        target: ./s3-irsa/

  - name: execute-terraform
    required: true
    actions:
      onDeploy:
        defaults:
          dir: s3-irsa/
        before:
          - cmd: |
              ./terraform init -force-copy \
              -backend-config="bucket=${ZARF_VAR_STATE_BUCKET_NAME}" \
              -backend-config="key=${ZARF_VAR_IAC_STATE_KEY}" \
              -backend-config="region=${ZARF_VAR_REGION}" \
              -backend-config="dynamodb_table=${ZARF_VAR_STATE_DYNAMODB_TABLE_NAME}"
          - cmd: ./terraform plan
          - cmd: sleep 15 #time to review
          - cmd: ./terraform apply -auto-approve
      onRemove:
        defaults:
          dir: s3-irsa/
        before:
          - cmd: |
              if [ "$(./terraform output force_destroy)" = true ]; then
                ./terraform destroy -auto-approve
              else
                echo "Skipping remove, force_destroy is set to false"
              fi
  - name: terraform-outputs
    required: true
    actions:
      onDeploy:
        defaults:
          dir: s3-irsa/
        after:
          - cmd: ./terraform output s3_bucket > s3_bucket.txt
          - cmd: ./terraform output irsa_role_arn > s3_irsa_role_arn.txt
